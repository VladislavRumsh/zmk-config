#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/keys.h>

/ {
    combos {
        compatible = "zmk,combos";

        L_ALT {
            bindings = <&kp LEFT_ALT>;
            key-positions = <20 21 22>;
            layers = <0>;
        };

        R_ALT {
            bindings = <&kp RIGHT_ALT>;
            key-positions = <29 28 27>;
            layers = <0>;
        };

        L_GUI {
            bindings = <&kp LEFT_GUI>;
            key-positions = <0 1 2>;
            layers = <0>;
        };

        R_GUI {
            bindings = <&kp RIGHT_GUI>;
            key-positions = <7 8 9>;
            layers = <0>;
        };

        R_CTRL {
            bindings = <&kp RCTRL>;
            key-positions = <17 18 19>;
            layers = <0>;
        };

        L_CTRL {
            bindings = <&kp LCTRL>;
            key-positions = <11 10 12>;
            layers = <0>;
        };

        L_ALT+CTRL {
            bindings = <&kp LA(LCTRL)>;
            key-positions = <20 21 22 23>;
            layers = <0>;
        };

        R_ALT+CTRL {
            bindings = <&kp RA(RCTRL)>;
            key-positions = <29 28 27 26>;
            layers = <0>;
        };

        L_ALT+CTRL_GUI {
            bindings = <&kp LA(LG(LCTRL))>;
            key-positions = <20 21 22 24>;
            layers = <0>;
        };

        R_ALT+CTRL_GUI {
            bindings = <&kp RA(RG(RCTRL))>;
            key-positions = <29 28 27 25>;
            layers = <0>;
        };

        L_GUI+ALT {
            bindings = <&kp LA(LEFT_GUI)>;
            key-positions = <0 1 2 4>;
            layers = <0>;
        };

        R_GUI+ALT {
            bindings = <&kp RA(RIGHT_GUI)>;
            key-positions = <7 8 9 5>;
            layers = <0>;
        };

        L_GUI+CTRL {
            bindings = <&kp LC(LEFT_GUI)>;
            key-positions = <0 1 2 3>;
            layers = <0>;
        };

        R_GUI+CTRL {
            bindings = <&kp RC(RIGHT_GUI)>;
            key-positions = <7 8 9 6>;
            layers = <0>;
        };

        combo-bootloader {
            bindings = <&bootloader>;
            key-positions = <10 19>;
            layers = <2>;
        };

        combo-reset {
            bindings = <&sys_reset>;
            key-positions = <0 9>;
            layers = <2>;
        };

        combo_bt-reset {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <20 29>;
            layers = <2>;
        };

        enter+shift {
            bindings = <&kp LS(ENTER)>;
            key-positions = <30 3 1 2>;
            layers = <0>;
        };

        left_hand {
            bindings = <&to 4>;
            key-positions = <30 21 22 23>;
            layers = <0>;
        };

        numpad_layer_toggle {
            bindings = <&to 5>;
            key-positions = <21 22 30 20>;
            layers = <0>;
        };

        Game_Layer {
            bindings = <&to 6>;
            key-positions = <21 30 20 24>;
            layers = <0>;
        };

        from_game_to_default {
            bindings = <&to 0>;
            key-positions = <30 21 22 23>;
            layers = <6>;
        };

        game_esc {
            bindings = <&kp ESCAPE>;
            key-positions = <1 2 0 2 2 2 30>;
            layers = <6>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp E  &kp R           &kp T          &kp Y        &kp U          &kp I      &kp O    &kp P
&kp A  &kp S  &kp D  &kp F           &kp G          &kp H        &kp J          &kp K      &kp L    &kp SQT
&kp Z  &kp X  &kp C  &kp V           &kp B          &kp N        &kp M          &kp COMMA  &kp DOT  &kp SLASH
                     &kp LEFT_SHIFT  &lt 5 ENTER    &lt 1 SPACE  &kp BACKSPACE
            >;
        };

        right_layer {
            bindings = <
&kp INSERT   &kp N1  &kp N2  &kp N3   &trans     &kp HOME        &kp PG_DN  &kp PG_UP     &kp END    &kp COLON
&kp DEL      &kp N4  &kp N5  &kp N6   &trans     &kp LEFT_ARROW  &kp DOWN   &kp UP_ARROW  &kp RIGHT  &kp SEMICOLON
&kp LS(TAB)  &kp N7  &kp N8  &kp N9   &kp N0     &kp PLUS        &kp MINUS  &kp ASTERISK  &kp SLASH  &kp EQUAL
                             &kp TAB  &kp ESC    &trans          &trans
            >;
        };

        left_layer {
            bindings = <
&kp LBKT      &kp RIGHT_BRACKET  &kp LBRC  &kp RBRC  &trans       &kp TILDE  &kp LPAR       &kp RPAR      &kp LESS_THAN  &kp GREATER_THAN
&kp EXCL      &kp AT             &kp HASH  &kp DLLR  &kp PRCNT    &kp CARET  &kp AMPERSAND  &kp ASTERISK  &kp BSLH       &kp GRAVE
&kp QUESTION  &trans             &trans    &trans    &trans       &kp AMPS   &kp UNDER      &kp MINUS     &kp EQUAL      &kp PIPE
                                           &trans    &trans       &trans     &trans
            >;
        };

        tri_layer {
            bindings = <
&trans  &trans  &trans  &bt BT_SEL 3  &bt BT_SEL 0    &trans      &kp K_MUTE         &caps_word       &trans      &trans
&trans  &trans  &trans  &bt BT_SEL 4  &bt BT_SEL 1    &kp C_PREV  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT  &trans
&trans  &trans  &trans  &bt BT_CLR    &bt BT_SEL 2    &trans      &kp C_PLAY_PAUSE   &kp PRINTSCREEN  &trans      &trans
                        &trans        &trans          &trans      &trans
            >;
        };

        left_hand {
            bindings = <
&kp LC(Q)  &kp LC(W)  &kp LC(Y)  &kp LC(U)       &kp TAB        &trans  &trans  &trans  &trans  &trans
&kp LC(A)  &kp LC(S)  &kp LG(F)  &kp BACKSPACE   &kp SPACE      &trans  &trans  &trans  &trans  &trans
&kt LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)       &kp ESCAPE     &trans  &trans  &trans  &trans  &trans
                                 &kp LEFT_SHIFT  &lt 5 SPACE    &trans  &trans
            >;
        };

        numpad {
            bindings = <
&kp PLUS      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3   &kp MINUS       &trans  &trans  &trans  &trans  &trans
&kp ASTERISK  &kp NUMBER_4  &kp N5        &kp NUMBER_6   &kp SLASH       &trans  &trans  &trans  &trans  &trans
&to 0         &kp N7        &kp N8        &kp N9         &kp NUMBER_0    &trans  &trans  &trans  &trans  &trans
                                          &kp BACKSPACE  &kp ENTER       &trans  &trans
            >;
        };

        Game {
            bindings = <
&kp TAB     &kp Q  &kp W  &kp E  &kp R        &trans  &trans  &trans  &trans  &trans
&kp LSHIFT  &kp A  &kp S  &kp D  &kp F        &trans  &trans  &trans  &trans  &trans
&kp LCTRL   &kp Z  &kp X  &kp C  &kp V        &trans  &trans  &trans  &trans  &trans
                          &kp G  &kp SPACE    &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        cond_layer1 {
            if-layers = <1 5>;
            then-layer = <2>;
        };
    };
};
